import numpy as np
import pandas as pd
import cvxopt as cvx
from scipy.optimize import minimize
import matplotlib.pyplot as plt
np.set_printoptions(suppress=True)
pd.set_option('display.float_format',lambda x : '%.9f' % x)
###########################Task 4(a)###########################
data = pd.read_csv("DataForProblem5.csv").set_index("Date").drop(["B1",'Unnamed: 14',\
                                                                  'Unnamed: 13','Unnamed: 11'],axis = 1)
n = data.shape[1]
H = np.mat(data)
print("shape of H:", H.shape)
C = H.T * H
print("shape of C:", C.shape)
P = cvx.matrix(2*C)
q = cvx.matrix(np.mat(np.zeros(10)).T)
G = -cvx.matrix(np.eye(n))
h = cvx.matrix(np.mat(np.zeros(10)).T)
A = cvx.matrix(np.mat(np.ones(10)))
b = cvx.matrix(1.0)
opt_W = cvx.solvers.qp(P,q,G,h,A,b)
result = pd.DataFrame({"Sectors" : data.columns, "Weights" : opt_W["x"]})
print("The optimal weights are:\n ", result)
plt.figure(dpi = 120)
plt.bar([i for i in data.columns], opt_W["x"])
plt.xlabel("Number of Assets")
plt.ylabel("Weights")
plt.title("Optimal Weights for Minimum Variance Portfolio", fontsize = 20)
plt.grid(True)
plt.show()
###########################Task 4(b)###########################
mean_mat = np.mean(H, axis = 0) 
a = 0.5
P = cvx.matrix(2 * C * a)
q = cvx.matrix(np.mat(-mean_mat).T)
G = -cvx.matrix(np.eye(n))
h = cvx.matrix(np.mat(np.zeros(10)).T)
A = cvx.matrix(np.mat(np.ones(10)))
b = cvx.matrix(1.0)
opt_W = cvx.solvers.qp(P,q,G,h,A,b)
result = pd.DataFrame({"Sectors" : data.columns, "Weights" : opt_W["x"]})
print("The optimal weights are:\n ", result)
plt.figure(dpi = 120)
plt.bar([i for i in data.columns], opt_W["x"])
plt.xlabel("Number of Assets")
plt.ylabel("Weights")
plt.title("Optimal Weights for Maximized CE Portfolio", fontsize = 20)
plt.grid(True)
plt.show()
###########################Task 4(c)###########################
P = cvx.matrix(np.mat(np.zeros((10,10))))
q = cvx.matrix(np.mat(-mean_mat).T)
G = -cvx.matrix(np.eye(n))
h = cvx.matrix(np.mat(np.zeros(10)).T)
A = cvx.matrix(np.mat(np.ones(10)))
b = cvx.matrix(1.0)
opt_W = cvx.solvers.qp(P,q,G,h,A,b)
result = pd.DataFrame({"Sectors" : data.columns, "Weights" : opt_W["x"]})
print("The optimal weights are:\n ", result)
plt.figure(dpi = 120)
plt.bar([i for i in data.columns], opt_W["x"])
plt.xlabel("Number of Assets")
plt.ylabel("Weights")
plt.title("Optimal Weights for Maximized Expected Return Portfolio", fontsize = 20)
plt.grid(True)
plt.show()
###########################Task 4(d)###########################
B = np.mat(pd.read_csv("DataForProblem5.csv")["B1"])
P = cvx.matrix(2*C)
q = cvx.matrix((-2 * H.T * B.T))
G = -cvx.matrix(np.eye(n))
h = cvx.matrix(np.mat(np.zeros(10)).T)
A = cvx.matrix(np.mat(np.ones(10)))
b = cvx.matrix(1.0)
opt_W = cvx.solvers.qp(P,q,G,h,A,b)
result = pd.DataFrame({"Sectors" : data.columns, "Weights" : opt_W["x"]})
print("The optimal weights are:\n ", result)
plt.figure(dpi = 120)
plt.bar([i for i in data.columns], opt_W["x"])
plt.xlabel("Number of Assets")
plt.ylabel("Weights")
plt.title("Optimal Weights for Tracking Benchmark Portfolio", fontsize = 20)
plt.grid(True)
plt.show()
